version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: deviseos-postgres
    environment:
      POSTGRES_DB: deviseos
      POSTGRES_USER: deviseos
      POSTGRES_PASSWORD: deviseos
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deviseos -d deviseos"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - deviseos-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: deviseos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - deviseos-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: deviseos-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - deviseos-network

  # RabbitMQ for Celery
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: deviseos-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: deviseos
      RABBITMQ_DEFAULT_PASS: deviseos
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - deviseos-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: deviseos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - deviseos-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: deviseos-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - deviseos-network

  # DeviseOS Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deviseos-api
    environment:
      - DB_URL=postgresql://deviseos:deviseos@postgres:5432/deviseos
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://deviseos:deviseos@rabbitmq:5672/
      - STORAGE_S3_ENDPOINT=http://minio:9000
      - STORAGE_S3_ACCESS_KEY=minioadmin
      - STORAGE_S3_SECRET_KEY=minioadmin
      - SECURITY_SECRET_KEY=your-secret-key-here
      - SECURITY_ENCRYPTION_KEY=your-encryption-key-here
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - deviseos-network

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deviseos-worker
    environment:
      - DB_URL=postgresql://deviseos:deviseos@postgres:5432/deviseos
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://deviseos:deviseos@rabbitmq:5672/
      - STORAGE_S3_ENDPOINT=http://minio:9000
      - STORAGE_S3_ACCESS_KEY=minioadmin
      - STORAGE_S3_SECRET_KEY=minioadmin
      - SECURITY_SECRET_KEY=your-secret-key-here
      - SECURITY_ENCRYPTION_KEY=your-encryption-key-here
      - ENVIRONMENT=development
    command: celery -A deviseos.core.celery worker --loglevel=info
    volumes:
      - .:/app
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - deviseos-network

  # Celery Beat (Scheduler)
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deviseos-beat
    environment:
      - DB_URL=postgresql://deviseos:deviseos@postgres:5432/deviseos
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://deviseos:deviseos@rabbitmq:5672/
      - STORAGE_S3_ENDPOINT=http://minio:9000
      - STORAGE_S3_ACCESS_KEY=minioadmin
      - STORAGE_S3_SECRET_KEY=minioadmin
      - SECURITY_SECRET_KEY=your-secret-key-here
      - SECURITY_ENCRYPTION_KEY=your-encryption-key-here
      - ENVIRONMENT=development
    command: celery -A deviseos.core.celery beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - deviseos-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  deviseos-network:
    driver: bridge 